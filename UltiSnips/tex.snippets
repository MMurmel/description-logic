# ┌───────────────────┐
# │ Defining contexts │
# └───────────────────┘
global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'
def comment():
	return vim.eval('vimtex#syntax#in_comment()') == '1'
def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')")
	return x != '0' and y != '0'
endglobal

snippet alc "The ALC-DL" wA
$\mathcal{ALC}$
endsnippet

snippet graph "Graph here" bA
\begin{figure}[H]
	\centering
	\begin{tikzpicture}
		$1
	\end{tikzpicture}
	\caption{$2}
	${3:\label{$4}}
\end{figure}
endsnippet

snippet 2graph "Graph here" bA
\begin{figure}[H]
	\centering
	\begin{subfigure}[t]{.475\textwidth}
		\centering
		\begin{tikzpicture}
			$1
		\end{tikzpicture}
		\caption{$2}
		${3:\label{$4}}
	\end{subfigure}
	\hfill
	\begin{subfigure}[t]{.475\textwidth}
		\centering
		\begin{tikzpicture}
			$5
		\end{tikzpicture}
		\caption{$6}
		${7:\label{$8}}
	\end{subfigure}
	\caption{$9}
	${10:\label{$11}}
\end{figure}
endsnippet

context "env('tikzpicture')"
snippet node "Node in graph" bA
\node[default${1:, label= ${2:direction}:${3: label}}${4:, ${5:direction} of = ${6:node name}}] (${7:name})${8: at (${9:x}, ${10:y})} {${11:displayed name}};
endsnippet

context "env('tikzpicture')"
snippet edge "Edge in graph" bA
\draw (${1:starting node}) edge[${2: [label direction]}${3:, bend ${4:direction}}] node{${5:label}} (${6:target node});
endsnippet

context "env('tikzpicture')"
snippet loop "Edge in graph" bA
\draw (${1:starting node}) edge[loop ${2:direction}${3:, [label direction]}] node{${4:label}} ($1);
endsnippet

context "math()"
snippet du "disjoint union" Aw
\uplus
endsnippet

context "math()"
snippet Du "disjoint union" Aw
\biguplus_{${1:n=${2:1}}} ${3:${VISUAL}}
endsnippet

context "math()"
snippet sc "sub" Aw
\func{sub}
endsnippet

